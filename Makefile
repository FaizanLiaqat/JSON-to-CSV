CC = gcc
CFLAGS = -g -Wall -Wextra -std=c11 # Debugging, all warnings, C11 standard
LFLAGS = -lm # Link math library if atof needs it from non-standard libc, usually not
# Bison and Flex commands and flags
BISON = bison
BISONFLAGS = -d # Creates .h file, enables locations by default with newer bisons
FLEX = flex
FLEXFLAGS=
# Output executable name
TARGET = json2relcsv
# Source files
PARSER_Y = parser.y
SCANNER_L = scanner.l
# Generated C files from Bison and Flex
PARSER_C = parser.c
PARSER_H = parser.h # Generated by bison -d
LEXER_C = lexer.c
# Your C source files
C_SOURCES = main.c ast.c schema_csv.c $(PARSER_C) $(LEXER_C)
# Object files
OBJECTS = $(C_SOURCES:.c=.o)

.PHONY: all clean run_test1

all: $(TARGET)

$(TARGET): $(OBJECTS)
	$(CC) $(CFLAGS) $^ -o $@ $(LFLAGS)

# Rule for .c files to .o files
# Adding $(PARSER_H) (which is y.tab.h or parser.h) as a prerequisite for C files that include it.
# ast.h and schema_csv.h are also common prerequisites.
%.o: %.c ast.h schema_csv.h $(PARSER_H)
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.c ast.h $(PARSER_H) # For files like ast.c that might not need schema_csv.h
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.c # Fallback for main.c or others if more specific rule doesn't match
	$(CC) $(CFLAGS) -c $< -o $@

# Rule to generate parser.c and parser.h from parser.y
# Depends on ast.h because parser actions use AST creation functions.
$(PARSER_C) $(PARSER_H): $(PARSER_Y) ast.h
	$(BISON) $(BISONFLAGS) -o $(PARSER_C) $(PARSER_Y)

# Rule to generate lexer.c from scanner.l
# Depends on parser.h because scanner.l includes it for token definitions & yylval.
# Also depends on ast.h for unescape_json_string.
$(LEXER_C): $(SCANNER_L) $(PARSER_H) ast.h
	$(FLEX) $(FLEXFLAGS) -o $(LEXER_C) $(SCANNER_L)

# Clean up generated files
clean:
	rm -f $(TARGET) $(OBJECTS) $(PARSER_C) $(PARSER_H) $(LEXER_C)
	rm -rf ./test_output_dir # Clean default test output
	@echo "Cleaned build files and test_output_dir."

# Example run command - create a sample test file first
run_test1: $(TARGET)
	@mkdir -p test_output_dir
	@echo "{\"name\": \"Test User\", \"age\": 30, \"city\": \"Testville\", \"scores\": [10,20,30], \"address\": {\"street\": \"123 Main\", \"zip\": \"12345\"}}" > testcases/temp_test.json
	./$(TARGET) testcases/temp_test.json --print-ast -out-dir ./test_output_dir
	@echo "Test run complete. Check ./test_output_dir"
	@rm testcases/temp_test.json